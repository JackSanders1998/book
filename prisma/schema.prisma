// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  venues    Venue[]
  artists   Artist[]
}

model Venue {
  id          Int        @id @default(autoincrement())
  venueName   String
  username    String     @unique
  description String?
  published   Boolean?   @default(false)
  seats       Int?
  user        User       @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  timeslots   TimeSlot[]
  Booking     Booking[]

  @@index([userId])
}

model Artist {
  id          Int       @id @default(autoincrement())
  artistName  String
  username    String    @unique
  description String?
  published   Boolean?  @default(false)
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Booking     Booking[]

  @@index([userId])
}

model TimeSlot {
  id        Int       @id @default(autoincrement())
  start     DateTime
  end       DateTime
  venue     Venue     @relation(fields: [venueId], references: [id])
  venueId   Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Booking   Booking[]

  @@index([venueId])
}

model Booking {
  id         Int           @id @default(autoincrement())
  status     BookingStatus @default(REQUESTED)
  venue      Venue         @relation(fields: [venueId], references: [id])
  venueId    Int
  artist     Artist?       @relation(fields: [artistId], references: [id])
  artistId   Int?
  timeSlot   TimeSlot      @relation(fields: [timeSlotId], references: [id])
  timeSlotId Int
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  @@index([venueId])
  @@index([artistId])
  @@index([timeSlotId])
}

enum BookingStatus {
  REQUESTED // Artist requests
  CONFIRMED // Venue confirms
  DECLINED // Venue declines
  CANCELED // Artist cancels
  REJECTED // Venue rejects
}

// artist requests a booking -> create row in db with REQUESTED status
// REQUESTED && venue confirms -> update row in db to CONFIRMED
// REQUESTED && venue declines -> update row in db to DECLINED
// CONFIRMED && venue cancels -> update row in db to REJECTED
// CONFIRMED && artist cancels -> update row in db to CANCELED
